import Data.Char

--Ej1
esMinuscula :: Char -> Bool
esMinuscula caracter    | caracter >= 'a' && caracter <= 'z'    = True
                        | otherwise                             = False

--Ej2 
letraANatural :: Char -> Int
letraANatural letra = ord letra - ord 'a'

--Ej 3



desplazar :: Char -> Int -> Char
desplazar letra aMover  | not (esMinuscula letra)                                                   = letra --si no es minuscula devuelve la misma letra
                        | letraANatural letra + aMover <= 25 && letraANatural letra + aMover >= 0   = chr (ord letra + aMover)  --si la posicion de letra mas aMover esta entre 0 y 25, entonces le suma a mover
                        | otherwise                                                                 = chr (ord letra + mod (aMover) 26) -- si la posicion de letra mas amover se sale de los limites de 0 y 25 haces un mod 26 a ese numero (el conjunto de las letras de la a a la z tiene modulo 26) y lo sumas con la posicion de la letra que te dan 


-- 26 a+1

--Ej 4
cifrar :: String -> Int -> String
cifrar [] n = []
cifrar (x:[]) n | esMinuscula x = [desplazar x n]
                | otherwise = [x]
cifrar (x:xs) n | esMinuscula x = [desplazar x n] ++ cifrar xs n
                | otherwise = [x] ++ cifrar xs n

--Ej 5
